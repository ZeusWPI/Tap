<div
  id="modalOrderScanner"
  v-scope="ScannerController()"
  @mounted="setup"
  class="scanner-modal modal modal-target"
>
  <a class="modal-background" href="#" data-turbo="false"></a>

  <div class="modal-card">

    <!-- Header -->
    <header class="modal-card-head">
      <p class="modal-card-title">Scan a barcode</p>
      <a class="delete" aria-label="close" href="#" data-turbo="false"></a>
    </header>

    <!-- Content -->
    <div class="modal-card-body theme-no-blend p-0">

      <!-- Hidden barcode field for submitting the barcode -->
      <%= form_with url: new_user_orders_path(@user), id: "orderBarcodeScannerForm" do |f| %>
        <%= f.hidden_field :update_action, value: "add" %>
        <%= f.hidden_field :session, value: stringify_order_session(@order_session) %>
        <%= f.hidden_field :barcode, id: "orderBarcodeScannerFormInput" %>
      <% end %>

      <!-- Canvas -->
      <div class="scanner-canvas">
        <div id="barcodeCanvas"></div>

        <!-- Target -->
        <div class="scanner-canvas-laser" v-cloak v-show="!state.error && !state.loading"></div>

        <!-- Loading -->
        <div class="scanner-canvas-loading" v-show="state.loading">
          <div class="scanner-canvas-loading-title">Accessing Camera...</div>
          <div class="scanner-canvas-loading-message">Please wait while we fetch your camera.</div>
        </div>

        <!-- Error -->
        <div class="scanner-canvas-error" v-cloak v-show="state.error">
          <div class="scanner-canvas-error-title">{{ state.error?.title }}</div>
          <div class="scanner-canvas-error-message">{{ state.error?.message }}</div>
        </div>
      </div>
    </div>

    <!-- Footer -->
    <footer class="modal-card-foot is-justify-content-flex-end">
      <a class="button is-danger" href="#">Close</a>
    </footer>
  </div>
</div>

<script>
function ScannerController(props) {
  return {
    /**
     * Barcode scanner
     */
    scanner: new BarcodeScanner("#barcodeCanvas"),

    /**
     * Barcode scanner state
     */
    state: {
      loading: true,
      error: null
    },

    /**
     * Setup the barcode scanner.
     */
    setup() {
      // Set the scan callback
      this.scanner.onDetected = (barcode) => {
        document.getElementById("orderBarcodeScannerFormInput").value = barcode.codeResult.code;
        document.getElementById("orderBarcodeScannerForm")?.submit();

        // Close modal
        closeModal("modalOrderScanner");
      }

      // Set loaded callback
      this.scanner.onSuccess = () => {
        this.state.loading = false
      }

      // Set the error callback
      this.scanner.onError = (error) => {
        this.state.loading = false
        this.state.error = {};

        // Permission Denied
        if (error.name === "NotAllowedError") {
          this.state.error.title = "Camera access denied!"
          this.state.error.message = "Please allow camera access for this site and reload the webpage."
        }
        // Other errors
        else {
          this.state.error.title = error.name;
          this.state.error.message = error.message;
        }
      }

      const content = document.getElementById("modalOrderScanner");

      // Initialize the barcode scanner when the modal is opened
      content.addEventListener("modal:open", (e) => {
        if(e.detail.id === "modalOrderScanner") {
          this.init();
        }
      });

      // Destroy the barcode scanner when the modal is closed
      content.addEventListener("modal:close", (e) => {
        if(e.detail.id === "modalOrderScanner") {
          this.destroy();
        }
      });
    },

    /**
     * Init the barcode scanner.
     */
    init() {
      // Initialize the barcode scanner
      this.scanner.init();
    },

    /**
     * Destroy the barcode scanner.
     */
    destroy() {
      // Destroy the barcode scanner
      this.scanner.destroy();

      // Reset the state
      this.state.loading = true;
      this.state.error = null;
    }
  }
}
</script>
